"use strict";(globalThis.webpackChunkwebsite=globalThis.webpackChunkwebsite||[]).push([[0],{6947:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>t,contentTitle:()=>o,default:()=>g,frontMatter:()=>d,metadata:()=>i,toc:()=>s});const i=JSON.parse('{"id":"advanced/middleware","title":"Middleware","description":"Transform, enrich, and filter Contextual log entries across global, channel, and driver pipelines.","source":"@site/docs/advanced/middleware.mdx","sourceDirName":"advanced","slug":"/advanced/middleware","permalink":"/contextual/advanced/middleware","draft":false,"unlisted":false,"editUrl":"https://github.com/kingwill101/contextual/edit/main/website/docs/advanced/middleware.mdx","tags":[],"version":"current","frontMatter":{"title":"Middleware","description":"Transform, enrich, and filter Contextual log entries across global, channel, and driver pipelines."},"sidebar":"docsSidebar","previous":{"title":"Sampling Driver","permalink":"/contextual/api/drivers/sampling"},"next":{"title":"Batching and Shutdown","permalink":"/contextual/advanced/batching-and-shutdown"}}');var l=r(4848),a=r(8453);const d={title:"Middleware",description:"Transform, enrich, and filter Contextual log entries across global, channel, and driver pipelines."},o="Middleware",t={},s=[{value:"Single Middleware Pipeline",id:"single-middleware-pipeline",level:2},{value:"Global Middleware",id:"global-middleware",level:2},{value:"Channel Middleware",id:"channel-middleware",level:2},{value:"Driver-Type Middleware",id:"driver-type-middleware",level:2},{value:"Writing Middleware",id:"writing-middleware",level:2},{value:"Ordering",id:"ordering",level:2},{value:"Error Handling",id:"error-handling",level:2},{value:"Tips",id:"tips",level:2},{value:"Types of Middleware",id:"types-of-middleware",level:2},{value:"Context Middleware",id:"context-middleware",level:3},{value:"Driver Middleware",id:"driver-middleware",level:3},{value:"Channel-Specific Middleware",id:"channel-specific-middleware",level:3},{value:"Common Use Cases",id:"common-use-cases",level:2},{value:"Request Tracking",id:"request-tracking",level:3},{value:"Error Enhancement",id:"error-enhancement",level:3},{value:"Log Sampling",id:"log-sampling",level:3},{value:"Performance Monitoring",id:"performance-monitoring",level:3},{value:"Environment-Based Filtering",id:"environment-based-filtering",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"middleware",children:"Middleware"})}),"\n",(0,l.jsx)(n.p,{children:"Middleware allows transforming or filtering log entries before they reach a driver."}),"\n",(0,l.jsx)(n.h2,{id:"single-middleware-pipeline",children:"Single Middleware Pipeline"}),"\n",(0,l.jsx)(n.p,{children:"Contextual v2 uses a single middleware pipeline applied once per log entry, with a well-defined order: global \u2192 channel \u2192 driver-type."}),"\n",(0,l.jsx)(n.p,{children:"This ensures consistent processing and avoids duplication."}),"\n",(0,l.jsx)(n.h2,{id:"global-middleware",children:"Global Middleware"}),"\n",(0,l.jsx)(n.p,{children:"Global middleware runs for every log entry across all channels."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-dart",children:"final logger = await Logger.create(\n  config: LogConfig(\n    channels: [ConsoleChannel(ConsoleOptions(), name: 'console')],\n    middlewares: [\n      () => {'timestamp': DateTime.now().toIso8601String()},\n    ],\n  ),\n);\n"})}),"\n",(0,l.jsx)(n.h2,{id:"channel-middleware",children:"Channel Middleware"}),"\n",(0,l.jsx)(n.p,{children:"Channel middleware applies to specific channels."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-dart",children:"final logger = await Logger.create(\n  config: LogConfig(\n    channels: [\n      ConsoleChannel(\n        ConsoleOptions(),\n        name: 'console',\n        middlewares: [SensitiveDataFilter()],\n      ),\n    ],\n  ),\n);\n"})}),"\n",(0,l.jsx)(n.h2,{id:"driver-type-middleware",children:"Driver-Type Middleware"}),"\n",(0,l.jsx)(n.p,{children:"Driver-type middleware applies to all channels of a specific driver type."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-dart",children:"logger.addDriverMiddleware<ConsoleLogDriver>(RateLimitMiddleware());\n"})}),"\n",(0,l.jsx)(n.h2,{id:"writing-middleware",children:"Writing Middleware"}),"\n",(0,l.jsxs)(n.p,{children:["Implement ",(0,l.jsx)(n.code,{children:"Middleware"})," for global or channel middleware, or ",(0,l.jsx)(n.code,{children:"DriverMiddleware"})," for driver-specific."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-dart",children:"class SensitiveDataFilter implements Middleware {\n  @override\n  LogEntry handle(LogEntry entry) {\n    final masked = entry.copyWith(message: _mask(entry.message));\n    return masked;\n  }\n}\n"})}),"\n",(0,l.jsx)(n.h2,{id:"ordering",children:"Ordering"}),"\n",(0,l.jsx)(n.p,{children:"Middleware executes in this order:"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsx)(n.li,{children:"Global middleware (in order of addition)"}),"\n",(0,l.jsx)(n.li,{children:"Channel middleware (in order of addition)"}),"\n",(0,l.jsx)(n.li,{children:"Driver-type middleware (in order of addition)"}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,l.jsx)(n.p,{children:"If middleware throws, the error is logged internally, and processing continues."}),"\n",(0,l.jsx)(n.h2,{id:"tips",children:"Tips"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Prefer type-based registration for driver middleware."}),"\n",(0,l.jsx)(n.li,{children:"Keep middleware side-effect free."}),"\n",(0,l.jsx)(n.li,{children:"Use [MiddlewareResult.stop] to halt processing."}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Middleware in Contextual provides a powerful way to transform, enrich, or filter log entries before they are processed by drivers. There are several types of middleware that can be used at different stages of the logging pipeline."}),"\n",(0,l.jsx)(n.h2,{id:"types-of-middleware",children:"Types of Middleware"}),"\n",(0,l.jsx)(n.h3,{id:"context-middleware",children:"Context Middleware"}),"\n",(0,l.jsx)(n.p,{children:"Context middleware allows you to add or modify context data for all log entries:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-dart",children:"final logger = await Logger.create(\n  config: LogConfig(\n    channels: [ConsoleChannel(ConsoleOptions(), name: 'console')],\n    middlewares: [\n      () => {\n        'timestamp': DateTime.now().toIso8601String(),\n        'hostname': Platform.hostname,\n        'process_id': Platform.pid,\n      },\n    ],\n  ),\n);\n"})}),"\n",(0,l.jsx)(n.h3,{id:"driver-middleware",children:"Driver Middleware"}),"\n",(0,l.jsx)(n.p,{children:"Driver middleware can transform or filter log entries before they reach specific drivers:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-dart",children:"class SensitiveDataFilter implements DriverMiddleware {\n  @override\n  FutureOr<DriverMiddlewareResult> handle(LogEntry entry) {\n    final filtered = entry.message.replaceAll(\n      RegExp(r'\\b\\d{4}-\\d{4}-\\d{4}-\\d{4}\\b'),\n      '[REDACTED]'\n    );\n\n    return DriverMiddlewareResult.modify(entry.copyWith(message: filtered));\n  }\n}\n\nlogger.addDriverMiddleware<ConsoleLogDriver>(SensitiveDataFilter());\n"})}),"\n",(0,l.jsx)(n.h3,{id:"channel-specific-middleware",children:"Channel-Specific Middleware"}),"\n",(0,l.jsx)(n.p,{children:"Middleware can be applied to specific channels:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-dart",children:"final logger = await Logger.create(\n  config: LogConfig(\n    channels: [\n      WebhookChannel(\n        WebhookOptions(url: Uri.parse('https://logs.example.com')),\n        name: 'webhook',\n        middlewares: [\n          RateLimitMiddleware(maxRequestsPerMinute: 60),\n          RetryMiddleware(maxRetries: 3),\n        ],\n      ),\n    ],\n  ),\n);\n"})}),"\n",(0,l.jsx)(n.h2,{id:"common-use-cases",children:"Common Use Cases"}),"\n",(0,l.jsx)(n.h3,{id:"request-tracking",children:"Request Tracking"}),"\n",(0,l.jsx)(n.p,{children:"Add request IDs to all logs within a web application:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-dart",children:"class RequestTracker implements Middleware {\n  final _requestIds = AsyncLocal<String>();\n\n  void setRequestId(String id) {\n    _requestIds.value = id;\n  }\n\n  @override\n  LogEntry handle(LogEntry entry) {\n    if (_requestIds.value == null) return entry;\n\n    final newContext = Context({\n      ...entry.record.context.all(),\n      'request_id': _requestIds.value,\n    });\n\n    return entry.copyWith(context: newContext);\n  }\n}\n\nfinal requestTracker = RequestTracker();\n\nfinal logger = await Logger.create(\n  config: LogConfig(\n    channels: [ConsoleChannel(ConsoleOptions(), name: 'console')],\n    middlewares: [requestTracker],\n  ),\n);\n\n// In your request handler:\napp.use((Request request, Response response) {\n  requestTracker.setRequestId(generateRequestId());\n  // ... handle request\n});\n"})}),"\n",(0,l.jsx)(n.h3,{id:"error-enhancement",children:"Error Enhancement"}),"\n",(0,l.jsx)(n.p,{children:"Add stack traces and additional context to error logs:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-dart",children:"class ErrorEnhancer implements Middleware {\n  @override\n  LogEntry handle(LogEntry entry) {\n    if (entry.record.level < Level.error) return entry;\n\n    final enhanced = Context({\n      ...entry.record.context.all(),\n      'stack_trace': entry.record.stackTrace.toString(),\n      'error_time': DateTime.now().toIso8601String(),\n    });\n\n    return entry.copyWith(context: enhanced);\n  }\n}\n\nfinal logger = await Logger.create(\n  config: LogConfig(\n    channels: [ConsoleChannel(ConsoleOptions(), name: 'console')],\n    middlewares: [ErrorEnhancer()],\n  ),\n);\n"})}),"\n",(0,l.jsx)(n.h3,{id:"log-sampling",children:"Log Sampling"}),"\n",(0,l.jsx)(n.p,{children:"Implement probabilistic logging for high-volume environments:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-dart",children:"class SamplingMiddleware implements Middleware {\n  final double sampleRate;\n  final Random _random = Random();\n\n  SamplingMiddleware({this.sampleRate = 0.1}); // 10% sample rate\n\n  @override\n  LogEntry? handle(LogEntry entry) {\n    // Always log errors and above\n    if (entry.record.level >= Level.error) return entry;\n\n    // Sample other logs based on rate\n    return _random.nextDouble() < sampleRate ? entry : null;\n  }\n}\n\nfinal logger = await Logger.create(\n  config: LogConfig(\n    channels: [ConsoleChannel(ConsoleOptions(), name: 'console')],\n    middlewares: [SamplingMiddleware(sampleRate: 0.01)],\n  ),\n);\n"})}),"\n",(0,l.jsx)(n.h3,{id:"performance-monitoring",children:"Performance Monitoring"}),"\n",(0,l.jsx)(n.p,{children:"Track and log slow operations:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-dart",children:"class PerformanceMonitor implements Middleware {\n  final Duration threshold;\n  final _operationStarts = <String, DateTime>{};\n\n  PerformanceMonitor({\n    this.threshold = const Duration(milliseconds: 100),\n  });\n\n  void startOperation(String operationId) {\n    _operationStarts[operationId] = DateTime.now();\n  }\n\n  void endOperation(String operationId) {\n    final start = _operationStarts.remove(operationId);\n    if (start == null) return;\n\n    final duration = DateTime.now().difference(start);\n    if (duration > threshold) {\n      logger.warning('Slow operation detected', Context({\n        'operation_id': operationId,\n        'duration_ms': duration.inMilliseconds,\n        'threshold_ms': threshold.inMilliseconds,\n      }));\n    }\n  }\n\n  @override\n  LogEntry handle(LogEntry entry) {\n    // Pass through all logs, this middleware only generates new ones\n    return entry;\n  }\n}\n\nfinal perfMonitor = PerformanceMonitor(\n  threshold: const Duration(milliseconds: 200),\n);\n\nfinal logger = await Logger.create(\n  config: LogConfig(\n    channels: [ConsoleChannel(ConsoleOptions(), name: 'console')],\n    middlewares: [perfMonitor],\n  ),\n);\n\n// Usage:\nperfMonitor.startOperation('db-query-1');\nawait database.query(...);\nperfMonitor.endOperation('db-query-1');\n"})}),"\n",(0,l.jsx)(n.h3,{id:"environment-based-filtering",children:"Environment-Based Filtering"}),"\n",(0,l.jsx)(n.p,{children:"Filter logs based on the environment:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-dart",children:"class EnvironmentFilter implements Middleware {\n  final String environment;\n  final Set<Level> allowedLevels;\n\n  EnvironmentFilter({\n    required this.environment,\n    required this.allowedLevels,\n  });\n\n  @override\n  LogEntry? handle(LogEntry entry) {\n    switch (environment) {\n      case 'production':\n        return allowedLevels.contains(entry.record.level) ? entry : null;\n      case 'development':\n        return entry; // Log everything in development\n      default:\n        return entry;\n    }\n  }\n}\n\nfinal logger = await Logger.create(\n  config: LogConfig(\n    channels: [\n      ConsoleChannel(ConsoleOptions(), name: 'console'),\n    ],\n    middlewares: [\n      EnvironmentFilter(\n        environment: 'production',\n        allowedLevels: {\n          Level.warning,\n          Level.error,\n          Level.critical,\n          Level.alert,\n          Level.emergency,\n        },\n      ),\n    ],\n  ),\n);\n"})}),"\n",(0,l.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Order Matters"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-dart",children:"// Correct order: sensitive data is filtered before being sent to external service\nfinal logger = await Logger.create(\n  config: LogConfig(\n    channels: [WebhookChannel(WebhookOptions(url: Uri.parse('...')), name: 'webhook')],\n    middlewares: [SensitiveDataFilter(), ExternalServiceMiddleware()],\n  ),\n);\n\n// Incorrect order: sensitive data might be sent before being filtered\nfinal logger = await Logger.create(\n  config: LogConfig(\n    channels: [WebhookChannel(WebhookOptions(url: Uri.parse('...')), name: 'webhook')],\n    middlewares: [ExternalServiceMiddleware(), SensitiveDataFilter()],\n  ),\n);\n"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Keep Middleware Focused"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-dart",children:"// Good: Single responsibility\nfinal logger = await Logger.create(\n  config: LogConfig(\n    channels: [ConsoleChannel(ConsoleOptions(), name: 'console')],\n    middlewares: [SensitiveDataFilter(), PerformanceMonitor()],\n  ),\n);\n\n// Bad: Too many responsibilities\nfinal logger = await Logger.create(\n  config: LogConfig(\n    channels: [ConsoleChannel(ConsoleOptions(), name: 'console')],\n    middlewares: [CombinedMiddleware()], // Does filtering, monitoring, etc.\n  ),\n);\n"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Handle Errors Gracefully"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-dart",children:"class SafeMiddleware implements Middleware {\n  @override\n  LogEntry handle(LogEntry entry) {\n    try {\n      // Your middleware logic\n      return entry;\n    } catch (e) {\n      // Log the error but don't block the entry\n      print('Middleware error: $e');\n      return entry;\n    }\n  }\n}\n"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Use Async Operations Carefully"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-dart",children:"class AsyncMiddleware implements Middleware {\n  @override\n  LogEntry handle(LogEntry entry) async {\n    // Avoid long-running operations that could block logging\n    final result = await someQuickOperation();\n    return entry;\n  }\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"/api/drivers/configuration",children:"Driver Configuration"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"/api/overview",children:"API Overview"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"/getting-started",children:"Getting Started"})}),"\n"]})]})}function g(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>d,x:()=>o});var i=r(6540);const l={},a=i.createContext(l);function d(e){const n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:d(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);
"use strict";(globalThis.webpackChunkwebsite=globalThis.webpackChunkwebsite||[]).push([[850],{6616:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>t,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>c});const l=JSON.parse('{"id":"api/drivers/stack","title":"Stack Driver","description":"Combine multiple logging channels into a single fan-out destination.","source":"@site/docs/api/drivers/stack.mdx","sourceDirName":"api/drivers","slug":"/api/drivers/stack","permalink":"/contextual/api/drivers/stack","draft":false,"unlisted":false,"editUrl":"https://github.com/kingwill101/contextual/edit/main/website/docs/api/drivers/stack.mdx","tags":[],"version":"current","frontMatter":{"title":"Stack Driver","description":"Combine multiple logging channels into a single fan-out destination."},"sidebar":"docsSidebar","previous":{"title":"Webhook Driver (API)","permalink":"/contextual/api/drivers/webhook"},"next":{"title":"Sampling Driver","permalink":"/contextual/api/drivers/sampling"}}');var r=i(4848),s=i(8453);const a={title:"Stack Driver",description:"Combine multiple logging channels into a single fan-out destination."},o="Stack Driver",t={},c=[{value:"Overview",id:"overview",level:2},{value:"Options",id:"options",level:2},{value:"Usage",id:"usage",level:2},{value:"Typed configuration (recommended)",id:"typed-configuration-recommended",level:3},{value:"Imperative wiring (raw drivers)",id:"imperative-wiring-raw-drivers",level:3},{value:"Targeting the stack",id:"targeting-the-stack",level:3},{value:"ignoreExceptions",id:"ignoreexceptions",level:2},{value:"Examples",id:"examples",level:2},{value:"1) Critical logs to multiple destinations",id:"1-critical-logs-to-multiple-destinations",level:3},{value:"2) Stack + Sampling (reduce noise)",id:"2-stack--sampling-reduce-noise",level:3},{value:"3) Per-destination formatters",id:"3-per-destination-formatters",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"See also",id:"see-also",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"stack-driver",children:"Stack Driver"})}),"\n",(0,r.jsx)(n.p,{children:"Fan out a single log to multiple destinations. The Stack driver lets you combine multiple channels (e.g., console, file, webhook) into one logical output so that a single log call is delivered everywhere you need it."}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Send each log entry to multiple underlying drivers"}),"\n",(0,r.jsx)(n.li,{children:"Reference existing channels by name (typed configuration)"}),"\n",(0,r.jsxs)(n.li,{children:["Control failure behavior with ",(0,r.jsx)(n.code,{children:"ignoreExceptions"})]}),"\n",(0,r.jsx)(n.li,{children:"Compose with other drivers (sampling, file rotation, webhooks)"}),"\n",(0,r.jsx)(n.li,{children:"Great for \u201ccritical\u201d or \u201caudit\u201d logs that must land in more than one place"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"options",children:"Options"}),"\n",(0,r.jsxs)(n.p,{children:["When using the typed configuration, the Stack driver is configured via ",(0,r.jsx)(n.code,{children:"StackOptions"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"class StackOptions {\n  final List<String> channels; // names of other channels to stack\n  final bool ignoreExceptions;\n\n  const StackOptions({\n    required this.channels,\n    this.ignoreExceptions = false,\n  });\n}\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"channels"}),": Names of other channels to fan out to. These must be defined elsewhere in your configuration with matching ",(0,r.jsx)(n.code,{children:"name"})," values."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ignoreExceptions"})," (default: ",(0,r.jsx)(n.code,{children:"false"}),"): If ",(0,r.jsx)(n.code,{children:"true"}),", the stack will continue delivering logs to other destinations when one destination throws. If ",(0,r.jsx)(n.code,{children:"false"}),", exceptions propagate so you can fail fast."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["When using the imperative API, you create a ",(0,r.jsx)(n.code,{children:"StackLogDriver"})," with a list of existing ",(0,r.jsx)(n.code,{children:"LogDriver"})," instances:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"StackLogDriver(\n  [driver1, driver2, ...],\n  { bool ignoreExceptions = /* driver-specific default */ }\n)\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,r.jsx)(n.h3,{id:"typed-configuration-recommended",children:"Typed configuration (recommended)"}),"\n",(0,r.jsx)(n.p,{children:"Define your base channels (console, file, webhook), then define a stack that fans out to them by referencing their names:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"import 'package:contextual/contextual.dart';\n\nFuture<void> main() async {\n  final logger = await Logger.create(\n    config: LogConfig(\n      channels: [\n        ConsoleChannel(\n          ConsoleOptions(),\n          name: 'console',\n        ),\n        DailyFileChannel(\n          DailyFileOptions(path: 'logs/app', retentionDays: 14),\n          name: 'file',\n        ),\n        WebhookChannel(\n          WebhookOptions(url: Uri.parse('https://logs.example.com/ingest')),\n          name: 'remote',\n        ),\n        // Stack channel referencing existing channels by name:\n        StackChannel(\n          StackOptions(\n            channels: ['console', 'file', 'remote'],\n            ignoreExceptions: true, // continue even if one fails\n          ),\n          name: 'stack',\n        ),\n      ],\n    ),\n  );\n\n  // This single call goes to console, file, and webhook\n  logger['stack']?.error('Critical failure', Context({'order_id': 'ord_777'}));\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Notes:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Define base channels before the stack so they can be referenced by name."}),"\n",(0,r.jsx)(n.li,{children:"Each underlying channel can have its own formatter (e.g., pretty for console, JSON for webhook)."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"imperative-wiring-raw-drivers",children:"Imperative wiring (raw drivers)"}),"\n",(0,r.jsxs)(n.p,{children:["Programmatically compose a ",(0,r.jsx)(n.code,{children:"StackLogDriver"}),". Useful for dynamic wiring or tests:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"import 'package:contextual/contextual.dart';\n\nFuture<void> main() async {\n  final logger = await Logger.create();\n\n  // Base channels\n  logger.addChannel('console', ConsoleLogDriver());\n  logger.addChannel(\n    'file',\n    DailyFileLogDriver.fromOptions(\n      DailyFileOptions(path: 'logs/app', retentionDays: 14),\n    ),\n  );\n\n  // Build a stack by reusing underlying drivers:\n  final consoleDriver = logger.getChannel('console')!.driver;\n  final fileDriver = logger.getChannel('file')!.driver;\n\n  logger.addChannel(\n    'stack',\n    StackLogDriver([consoleDriver, fileDriver], ignoreExceptions: true),\n  );\n\n  // Fan out to both console and file\n  logger['stack']?.warning('This is delivered to multiple outputs');\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"targeting-the-stack",children:"Targeting the stack"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["By name:","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"logger['stack']?.info('Hello, world!');\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["By driver type (not specific to stack, but useful):","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"logger.forDriver<ConsoleLogDriver>().debug('This goes to all console outputs');\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"ignoreexceptions",children:"ignoreExceptions"}),"\n",(0,r.jsx)(n.p,{children:"Controls error behavior when one of the underlying drivers fails:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"ignoreExceptions: true"})," (recommended for resilience)"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"If an underlying driver throws, the stack continues with the remaining drivers."}),"\n",(0,r.jsx)(n.li,{children:"Prevents a single destination from breaking all logging."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"ignoreExceptions: false"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"If an underlying driver throws, the stack surfaces the exception to the caller."}),"\n",(0,r.jsx)(n.li,{children:"Prefer when you need strict failure visibility and fail-fast behavior."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Typed example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"StackChannel(\n  StackOptions(\n    channels: ['console', 'file', 'remote'],\n    ignoreExceptions: true, // continue even if one fails\n  ),\n  name: 'stack',\n);\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(n.h3,{id:"1-critical-logs-to-multiple-destinations",children:"1) Critical logs to multiple destinations"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"final logger = await Logger.create(\n  config: LogConfig(\n    channels: [\n      ConsoleChannel(ConsoleOptions(), name: 'console'),\n      DailyFileChannel(DailyFileOptions(path: 'logs/app'), name: 'file'),\n      WebhookChannel(\n        WebhookOptions(url: Uri.parse('https://logs.example.com/ingest')),\n        name: 'remote',\n      ),\n      StackChannel(\n        StackOptions(\n          channels: ['console', 'file', 'remote'],\n          ignoreExceptions: true,\n        ),\n        name: 'stack',\n      ),\n    ],\n  ),\n);\n\n// Critical messages go everywhere:\nlogger['stack']?.critical('Database unavailable', Context({'cluster': 'eu-1'}));\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-stack--sampling-reduce-noise",children:"2) Stack + Sampling (reduce noise)"}),"\n",(0,r.jsxs)(n.p,{children:["Wrap your stack with a ",(0,r.jsx)(n.code,{children:"SamplingChannel"})," for high-volume levels:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"final logger = await Logger.create(\n  config: LogConfig(\n    channels: [\n      ConsoleChannel(ConsoleOptions(), name: 'console'),\n      DailyFileChannel(DailyFileOptions(path: 'logs/app'), name: 'file'),\n      StackChannel(\n        StackOptions(channels: ['console', 'file'], ignoreExceptions: true),\n        name: 'stack',\n      ),\n      // Sample the stack via a separate channel:\n      SamplingChannel(\n        SamplingOptions(\n          rates: {\n            Level.debug: 0.1, // keep 10% of debug logs\n            Level.info: 1.0,  // keep all info logs\n          },\n          wrappedChannel: 'stack',\n        ),\n        name: 'stack_sampled',\n      ),\n    ],\n  ),\n);\n\n// Route noisy logs through the sampled stack\nlogger['stack_sampled']?.debug('This debug log may be sampled');\n"})}),"\n",(0,r.jsx)(n.h3,{id:"3-per-destination-formatters",children:"3) Per-destination formatters"}),"\n",(0,r.jsx)(n.p,{children:"Apply formatters at the underlying channel level:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"final logger = await Logger.create(\n  config: LogConfig(\n    channels: [\n      ConsoleChannel(\n        ConsoleOptions(),\n        name: 'console',\n        formatter: PrettyLogFormatter(),\n      ),\n      WebhookChannel(\n        WebhookOptions(url: Uri.parse('https://logs.example.com/ingest')),\n        name: 'remote',\n        formatter: JsonLogFormatter(),\n      ),\n      StackChannel(\n        StackOptions(channels: ['console', 'remote'], ignoreExceptions: true),\n        name: 'stack',\n      ),\n    ],\n  ),\n);\n\nlogger['stack']?.info('One message, two formats');\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Prefer ",(0,r.jsx)(n.code,{children:"ignoreExceptions: true"})," to avoid one failing destination blocking others."]}),"\n",(0,r.jsx)(n.li,{children:"Keep your stack simple; too many destinations increase latency and failure surface area."}),"\n",(0,r.jsx)(n.li,{children:"Apply formatters per underlying channel to match destination expectations."}),"\n",(0,r.jsx)(n.li,{children:"Avoid recursive/indirect loops (e.g., a stack referencing itself)."}),"\n",(0,r.jsxs)(n.li,{children:["For high-volume logs:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"SamplingChannel"})," to reduce noise at lower levels."]}),"\n",(0,r.jsxs)(n.li,{children:["Pair with ",(0,r.jsx)(n.code,{children:"DailyFileChannel"})," for local durability and retention."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Always call ",(0,r.jsx)(n.code,{children:"await logger.shutdown()"})," on application exit, especially when file drivers are involved."]}),"\n",(0,r.jsx)(n.li,{children:"Treat remote endpoints as unreliable; keep a Console/File fallback readily available."}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"see-also",children:"See also"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/api/overview",children:"API Overview"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/api/drivers/configuration",children:"Driver Configuration"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/api/drivers/console",children:"Console Driver"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/api/drivers/daily-file",children:"Daily File Driver"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/api/drivers/webhook",children:"Webhook Driver"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/advanced/middleware",children:"Middleware (advanced)"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/advanced/batching-and-shutdown",children:"Batching & Shutdown"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>o});var l=i(6540);const r={},s=l.createContext(r);function a(e){const n=l.useContext(s);return l.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),l.createElement(s.Provider,{value:n},e.children)}}}]);
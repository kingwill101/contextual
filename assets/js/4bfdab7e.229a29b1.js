"use strict";(globalThis.webpackChunkwebsite=globalThis.webpackChunkwebsite||[]).push([[998],{3238:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>g,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"usage","title":"Usage","description":"This guide covers common usage patterns and best practices for Contextual v2.","source":"@site/docs/usage.mdx","sourceDirName":".","slug":"/usage","permalink":"/contextual/usage","draft":false,"unlisted":false,"editUrl":"https://github.com/kingwill101/contextual/edit/main/website/docs/usage.mdx","tags":[],"version":"current","frontMatter":{"title":"Usage"},"sidebar":"docsSidebar","previous":{"title":"Getting Started","permalink":"/contextual/getting-started"},"next":{"title":"Next Steps","permalink":"/contextual/next-steps"}}');var a=t(4848),o=t(8453);const i={title:"Usage"},l="Usage Guide",s={},c=[{value:"Basic Logging",id:"basic-logging",level:2},{value:"Structured Logging with Context",id:"structured-logging-with-context",level:2},{value:"Multiple Channels and Targeting",id:"multiple-channels-and-targeting",level:2},{value:"Custom Formatters",id:"custom-formatters",level:2},{value:"Middleware for Enrichment",id:"middleware-for-enrichment",level:2},{value:"Error Handling and Logging",id:"error-handling-and-logging",level:2},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Shutdown Handling",id:"shutdown-handling",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"usage-guide",children:"Usage Guide"})}),"\n",(0,a.jsx)(n.p,{children:"This guide covers common usage patterns and best practices for Contextual v2."}),"\n",(0,a.jsx)(n.h2,{id:"basic-logging",children:"Basic Logging"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"import 'package:contextual/contextual.dart';\n\nvoid main() async {\n  final logger = await Logger.create(\n    config: LogConfig(\n      channels: [ConsoleChannel(ConsoleOptions(), name: 'console')],\n    ),\n  );\n  logger.info('Application started');\n  logger.warning('This is a warning');\n  logger.error('Something went wrong', Context({'error_code': 500}));\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"structured-logging-with-context",children:"Structured Logging with Context"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"// Add global context\nfinal logger = await Logger.create(\n  config: LogConfig(\n    channels: [ConsoleChannel(ConsoleOptions(), name: 'console')],\n    context: {'app': 'MyApp', 'version': '1.0.0'},\n  ),\n);\n\n// Add request-specific context\nlogger.info('User logged in', Context({\n  'user_id': '12345',\n  'ip_address': '192.168.1.1',\n  'user_agent': 'Mozilla/5.0...',\n}));\n"})}),"\n",(0,a.jsx)(n.h2,{id:"multiple-channels-and-targeting",children:"Multiple Channels and Targeting"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"final logger = await Logger.create(\n  config: LogConfig(\n    channels: [\n      ConsoleChannel(ConsoleOptions(), name: 'console'),\n      DailyFileChannel(\n        DailyFileOptions(path: 'logs/app'),\n        name: 'file',\n      ),\n    ],\n  ),\n);\n\n// Log to all channels\nlogger.info('General message');\n\n// Target specific channel by name\nlogger['console'].debug('Console only');\n\n// Target all channels of a type\nlogger.forDriver<ConsoleLogDriver>().info('All console channels');\n"})}),"\n",(0,a.jsx)(n.h2,{id:"custom-formatters",children:"Custom Formatters"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"class CustomFormatter extends LogMessageFormatter {\n  @override\n  String format(LogRecord record) {\n    return '[${record.level.name.toUpperCase()}] ${record.message}';\n  }\n}\n\nfinal logger = await Logger.create(\n  config: LogConfig(\n    formatter: CustomFormatter(),\n    channels: [ConsoleChannel(ConsoleOptions(), name: 'console')],\n  ),\n);\n"})}),"\n",(0,a.jsx)(n.h2,{id:"middleware-for-enrichment",children:"Middleware for Enrichment"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"final logger = await Logger.create(\n  config: LogConfig(\n    channels: [ConsoleChannel(ConsoleOptions(), name: 'console')],\n    middlewares: [\n      () => {'timestamp': DateTime.now().toIso8601String()},\n      RequestIdMiddleware(),\n    ],\n  ),\n);\n\nclass RequestIdMiddleware implements Middleware {\n  @override\n  LogEntry handle(LogEntry entry) {\n    // Add request ID if not present\n    final context = entry.record.context;\n    if (!context.all().containsKey('request_id')) {\n      return entry.copyWith(context: Context({\n        ...context.all(),\n        'request_id': generateRequestId(),\n      }));\n    }\n    return entry;\n  }\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"error-handling-and-logging",children:"Error Handling and Logging"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"try {\n  riskyOperation();\n} catch (e, stackTrace) {\n  logger.error('Operation failed', Context({\n    'error': e.toString(),\n    'stack_trace': stackTrace.toString(),\n  }));\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,a.jsx)(n.p,{children:"For high-throughput applications, enable batching:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"final logger = await Logger.create(\n  config: LogConfig(\n    batching: BatchingConfig(\n      enabled: true,\n      batchSize: 100,\n      flushInterval: const Duration(milliseconds: 500),\n    ),\n    channels: [ConsoleChannel(ConsoleOptions(), name: 'console')],\n  ),\n);\n"})}),"\n",(0,a.jsx)(n.h2,{id:"shutdown-handling",children:"Shutdown Handling"}),"\n",(0,a.jsx)(n.p,{children:"Always shutdown when using file drivers or in CLI applications:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-dart",children:"final logger = await Logger.create(/* config with file channels */);\n\ntry {\n  // Application logic\n} finally {\n  await logger.shutdown();\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/api/overview",children:"API Reference"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/advanced/middleware",children:"Advanced Features"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/migration/v2",children:"Migration Guide"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/advanced/type-formatters",children:"Type Formatters & Printers"})}),"\n"]})]})}function g(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>l});var r=t(6540);const a={},o=r.createContext(a);function i(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);
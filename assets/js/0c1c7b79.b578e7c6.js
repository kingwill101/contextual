"use strict";(globalThis.webpackChunkwebsite=globalThis.webpackChunkwebsite||[]).push([[995],{4425:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>t,contentTitle:()=>a,default:()=>g,frontMatter:()=>l,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"migration/v2","title":"Migration to v2","description":"Upgrade guide covering API changes, new configuration, and best practices for Contextual v2.","source":"@site/docs/migration/v2.mdx","sourceDirName":"migration","slug":"/migration/v2","permalink":"/contextual/migration/v2","draft":false,"unlisted":false,"editUrl":"https://github.com/kingwill101/contextual/edit/main/website/docs/migration/v2.mdx","tags":[],"version":"current","frontMatter":{"title":"Migration to v2","description":"Upgrade guide covering API changes, new configuration, and best practices for Contextual v2."},"sidebar":"docsSidebar","previous":{"title":"Shelf Integration","permalink":"/contextual/advanced/shelf-integration"}}');var o=i(4848),s=i(8453);const l={title:"Migration to v2",description:"Upgrade guide covering API changes, new configuration, and best practices for Contextual v2."},a="Migration to v2",t={},d=[{value:"Key Changes",id:"key-changes",level:2},{value:"Migration Examples",id:"migration-examples",level:2},{value:"Logger Creation and Configuration",id:"logger-creation-and-configuration",level:3},{value:"Channel Selection",id:"channel-selection",level:3},{value:"Middleware",id:"middleware",level:3},{value:"Driver Construction",id:"driver-construction",level:3},{value:"Breaking Changes",id:"breaking-changes",level:2},{value:"Tips",id:"tips",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"migration-to-v2",children:"Migration to v2"})}),"\n",(0,o.jsx)(n.p,{children:"Contextual v2 introduces typed configuration, fluent APIs, and a single middleware pipeline for improved ergonomics and safety. This guide covers the key changes and migration steps."}),"\n",(0,o.jsx)(n.h2,{id:"key-changes",children:"Key Changes"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Typed Configuration"}),": Replace map-based config with ",(0,o.jsx)(n.code,{children:"LogConfig"})," and typed channel classes for compile-time safety."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Fluent APIs"}),": Use ",(0,o.jsx)(n.code,{children:"logger.forDriver<T>()"})," for type-based selection and ",(0,o.jsx)(n.code,{children:"logger['name']"})," for name-based targeting."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Single Middleware Pipeline"}),": Middleware now applies in one place with defined order: global \u2192 channel \u2192 driver-type."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Batching"}),": Configure batching via ",(0,o.jsx)(n.code,{children:"LogConfig.batching"})," instead of per-driver settings."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"migration-examples",children:"Migration Examples"}),"\n",(0,o.jsx)(n.h3,{id:"logger-creation-and-configuration",children:"Logger Creation and Configuration"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Before (v1):"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dart",children:"final logger = Logger()\n  ..addChannel('console', ConsoleLogDriver())\n  ..addChannel('file', DailyFileLogDriver('logs/app.log'));\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"After (v2):"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dart",children:"final logger = await Logger.create(\n  config: LogConfig(\n    channels: [\n      ConsoleChannel(ConsoleOptions(), name: 'console'),\n      DailyFileChannel(DailyFileOptions(path: 'logs/app'), name: 'file'),\n    ],\n  ),\n);\n"})}),"\n",(0,o.jsx)(n.h3,{id:"channel-selection",children:"Channel Selection"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Before (v1):"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dart",children:"logger['console'].info('Message');\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"After (v2):"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dart",children:"logger['console'].info('Message'); // Name-based (unchanged)\nlogger.forDriver<ConsoleLogDriver>().info('Message'); // Type-based (new)\n"})}),"\n",(0,o.jsx)(n.h3,{id:"middleware",children:"Middleware"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Before (v1):"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dart",children:"logger.addMiddleware(() => {'timestamp': DateTime.now()});\nlogger.addDriverMiddleware<ConsoleLogDriver>(MyMiddleware());\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"After (v2):"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dart",children:"final logger = await Logger.create(\n  config: LogConfig(\n    channels: [ConsoleChannel(ConsoleOptions(), name: 'console')],\n    middlewares: [() => {'timestamp': DateTime.now()}],\n  ),\n);\n"})}),"\n",(0,o.jsx)(n.h3,{id:"driver-construction",children:"Driver Construction"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Before (v1):"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dart",children:"final driver = DailyFileLogDriver('logs/app', retentionDays: 30);\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"After (v2):"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dart",children:"final driver = DailyFileLogDriver.fromOptions(\n  DailyFileOptions(path: 'logs/app', retentionDays: 30),\n);\n"})}),"\n",(0,o.jsx)(n.h2,{id:"breaking-changes",children:"Breaking Changes"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Removed ",(0,o.jsx)(n.code,{children:"LogConfig"}),", ",(0,o.jsx)(n.code,{children:"ChannelConfig"}),", and all ",(0,o.jsx)(n.code,{children:"fromConfig"})," constructors."]}),"\n",(0,o.jsxs)(n.li,{children:["Removed string-based driver registration (",(0,o.jsx)(n.code,{children:"addChannel('name', Driver())"}),")."]}),"\n",(0,o.jsxs)(n.li,{children:["Middleware signature changed: ",(0,o.jsx)(n.code,{children:"handle(LogEntry)"})," instead of ",(0,o.jsx)(n.code,{children:"handle(String, LogEntry)"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:["Environment and level are now strings in ",(0,o.jsx)(n.code,{children:"LogConfig"})," (e.g., ",(0,o.jsx)(n.code,{children:"'production'"}),", ",(0,o.jsx)(n.code,{children:"'info'"}),")."]}),"\n",(0,o.jsx)(n.li,{children:"Batching is configured globally, not per-driver."}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"tips",children:"Tips"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Use typed configuration for better IDE support and fewer runtime errors."}),"\n",(0,o.jsx)(n.li,{children:"The single middleware pipeline simplifies debugging and ensures consistent ordering."}),"\n",(0,o.jsxs)(n.li,{children:["Most applications won't need explicit ",(0,o.jsx)(n.code,{children:"shutdown()"})," unless using file drivers."]}),"\n",(0,o.jsx)(n.li,{children:"Update tests to use the new APIs and remove references to deprecated classes."}),"\n"]})]})}function g(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>a});var r=i(6540);const o={},s=r.createContext(o);function l(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);
"use strict";(globalThis.webpackChunkwebsite=globalThis.webpackChunkwebsite||[]).push([[300],{8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>s});var i=r(6540);const o={},l=i.createContext(o);function a(e){const n=i.useContext(l);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),i.createElement(l.Provider,{value:n},e.children)}},9307:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>t,contentTitle:()=>s,default:()=>g,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"api/overview","title":"API Overview","description":"Key classes, configuration patterns, and advanced capabilities available in Contextual.","source":"@site/docs/api/overview.mdx","sourceDirName":"api","slug":"/api/overview","permalink":"/contextual/api/overview","draft":false,"unlisted":false,"editUrl":"https://github.com/kingwill101/contextual/edit/main/website/docs/api/overview.mdx","tags":[],"version":"current","frontMatter":{"title":"API Overview","description":"Key classes, configuration patterns, and advanced capabilities available in Contextual."},"sidebar":"docsSidebar","previous":{"title":"Next Steps","permalink":"/contextual/next-steps"},"next":{"title":"Driver Configuration","permalink":"/contextual/api/drivers/configuration"}}');var o=r(4848),l=r(8453);const a={title:"API Overview",description:"Key classes, configuration patterns, and advanced capabilities available in Contextual."},s="API Overview",t={},d=[{value:"Core Components",id:"core-components",level:2},{value:"Logger",id:"logger",level:3},{value:"Runtime Channels",id:"runtime-channels",level:4},{value:"LogDriver",id:"logdriver",level:3},{value:"Context",id:"context",level:3},{value:"LogEntry",id:"logentry",level:3},{value:"Formatters",id:"formatters",level:3},{value:"Advanced Features",id:"advanced-features",level:2},{value:"Batching",id:"batching",level:3},{value:"Middleware",id:"middleware",level:3},{value:"Type Formatters",id:"type-formatters",level:3},{value:"Configuration",id:"configuration",level:2},{value:"LogConfig",id:"logconfig",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"api-overview",children:"API Overview"})}),"\n",(0,o.jsx)(n.p,{children:"Contextual's API is designed to be intuitive and flexible, providing a rich set of features for logging in Dart applications."}),"\n",(0,o.jsx)(n.h2,{id:"core-components",children:"Core Components"}),"\n",(0,o.jsx)(n.h3,{id:"logger",children:"Logger"}),"\n",(0,o.jsx)(n.p,{children:"The main class for logging operations. It manages log channels, formatting, and message processing."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dart",children:"final logger = await Logger.create(\n  config: LogConfig(\n    environment: 'production',\n    formatter: JsonLogFormatter(),\n    channels: [ConsoleChannel(ConsoleOptions(), name: 'console')],\n  ),\n);\n"})}),"\n",(0,o.jsx)(n.p,{children:"Key methods:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"log(Level level, dynamic message, [Context? context])"}),": Core logging method"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"forDriver<T extends LogDriver>([String? name])"}),": Target specific driver types"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"addMiddleware(Middleware middleware)"}),": Add global middleware"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"withContext(Map<String, dynamic> context)"}),": Add shared context"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"setLevel(Level level)"}),": Set minimum log level"]}),"\n"]}),"\n",(0,o.jsx)(n.h4,{id:"runtime-channels",children:"Runtime Channels"}),"\n",(0,o.jsx)(n.p,{children:"Each channel is represented at runtime by a typed channel object that bundles:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["the channel ",(0,o.jsx)(n.code,{children:"name"})]}),"\n",(0,o.jsx)(n.li,{children:"the driver options"}),"\n",(0,o.jsxs)(n.li,{children:["an optional ",(0,o.jsx)(n.code,{children:"formatter"})]}),"\n",(0,o.jsxs)(n.li,{children:["optional ",(0,o.jsx)(n.code,{children:"middlewares"})," (applied after global middleware)"]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dart",children:"// Channels are configured via LogConfig\nfinal logger = await Logger.create(\n  config: LogConfig(\n    channels: [\n      ConsoleChannel(\n        ConsoleOptions(),\n        name: 'console',\n        formatter: PrettyLogFormatter(),\n      ),\n    ],\n  ),\n);\n\n// Access channels by name or type\nfinal consoleChannel = logger['console'];\nfinal consoleLogger = logger.forDriver<ConsoleLogDriver>();\n"})}),"\n",(0,o.jsx)(n.p,{children:"You can target drivers by type:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dart",children:"logger.forDriver<ConsoleLogDriver>().info('Only console drivers');\n\n// Add driver-specific middleware without naming the driver\nlogger.addDriverMiddleware<ConsoleLogDriver>(SensitiveDataFilter());\n"})}),"\n",(0,o.jsx)(n.h3,{id:"logdriver",children:"LogDriver"}),"\n",(0,o.jsx)(n.p,{children:"Abstract base class for implementing log drivers. Built-in drivers include:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"ConsoleLogDriver"}),": Terminal output with color support"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"DailyFileLogDriver"}),": Daily rotating file logs"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"WebhookLogDriver"}),": HTTP webhook integration"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"StackLogDriver"}),": Combines multiple drivers"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"SamplingLogDriver"}),": Probabilistic logging"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Example custom driver:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dart",children:"class CustomLogDriver extends LogDriver {\n  CustomLogDriver() : super('custom');\n\n  @override\n  Future<void> log(LogEntry entry) async {\n    // Custom log handling\n  }\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"Drivers are now constructed via typed options:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dart",children:"// Old way (deprecated)\nfinal driver = DailyFileLogDriver('logs/app.log');\n\n// New way\nfinal driver = DailyFileLogDriver.fromOptions(\n  DailyFileOptions(path: 'logs/app.log'),\n);\n"})}),"\n",(0,o.jsx)(n.h3,{id:"context",children:"Context"}),"\n",(0,o.jsx)(n.p,{children:"Container for structured log data:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dart",children:"final context = Context({\n  'user_id': 'user123',\n  'request_id': 'req456',\n  'metadata': {\n    'version': '1.0.0',\n    'environment': 'production'\n  }\n});\n"})}),"\n",(0,o.jsx)(n.h3,{id:"logentry",children:"LogEntry"}),"\n",(0,o.jsx)(n.p,{children:"Represents a single log message with metadata:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dart",children:"class LogEntry {\n  final LogRecord record;\n  final String formattedMessage;\n  \n  // Contains:\n  // - Level\n  // - Message\n  // - Context\n  // - Timestamp\n  // - Stack trace\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"formatters",children:"Formatters"}),"\n",(0,o.jsx)(n.p,{children:"Format log entries into strings:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"PlainTextLogFormatter"}),": Simple text output"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"JsonLogFormatter"}),": JSON-formatted logs"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"PrettyLogFormatter"}),": Colored, human-readable output"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"RawLogFormatter"}),": Unformatted message only"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"NullLogFormatter"}),": No formatting"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Custom formatter example:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dart",children:"class CustomFormatter extends LogMessageFormatter {\n  @override\n  String format(LogRecord record) {\n    return '[${record.level}] ${record.message}';\n  }\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"Formatters can be configured per channel:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dart",children:"// Channels are configured via LogConfig\nfinal logger = await Logger.create(\n  config: LogConfig(\n    channels: [\n      ConsoleChannel(\n        ConsoleOptions(),\n        name: 'console',\n        formatter: PrettyLogFormatter(),\n      ),\n      DailyFileChannel(\n        DailyFileOptions(path: 'logs/app'),\n        name: 'file',\n        formatter: JsonLogFormatter(),\n      ),\n    ],\n  ),\n);\n"})}),"\n",(0,o.jsx)(n.h2,{id:"advanced-features",children:"Advanced Features"}),"\n",(0,o.jsx)(n.h3,{id:"batching",children:"Batching"}),"\n",(0,o.jsxs)(n.p,{children:["Batches log messages for efficient processing via ",(0,o.jsx)(n.code,{children:"BatchingConfig"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dart",children:"final logger = await Logger.create(\n  config: LogConfig(\n    batching: BatchingConfig(\n      enabled: true,\n      batchSize: 100,\n      flushInterval: Duration(milliseconds: 500),\n    ),\n    channels: [ConsoleChannel(ConsoleOptions(), name: 'console')],\n  ),\n);\n"})}),"\n",(0,o.jsx)(n.h3,{id:"middleware",children:"Middleware"}),"\n",(0,o.jsx)(n.p,{children:"Transform or enrich log entries with a single pipeline:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dart",children:"final logger = await Logger.create(\n  config: LogConfig(\n    channels: [ConsoleChannel(ConsoleOptions(), name: 'console')],\n    middlewares: [\n      () => {\n        'timestamp': DateTime.now().toIso8601String(),\n        'process_id': Platform.pid,\n      },\n    ],\n  ),\n);\n\n// Driver-specific middleware\nlogger.addDriverMiddleware<ConsoleLogDriver>(SensitiveDataFilter());\n"})}),"\n",(0,o.jsx)(n.h3,{id:"type-formatters",children:"Type Formatters"}),"\n",(0,o.jsx)(n.p,{children:"Custom formatting for specific types:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dart",children:"logger.addTypeFormatter<Error>(ErrorLogFormatter());\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Type formatters work with the new serialization system. For a deeper dive, including real-world patterns and custom printers, see ",(0,o.jsx)(n.a,{href:"/advanced/type-formatters",children:"Type Formatters & Printers"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,o.jsx)(n.h3,{id:"logconfig",children:"LogConfig"}),"\n",(0,o.jsx)(n.p,{children:"Configure channels through typed objects:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dart",children:"final config = LogConfig(\n  environment: 'production',\n  level: 'info',\n  formatter: JsonLogFormatter(),\n  batching: BatchingConfig(\n    enabled: true,\n    batchSize: 50,\n    flushInterval: Duration(seconds: 1),\n  ),\n  channels: const [\n    DailyFileChannel(\n      DailyFileOptions(path: 'logs/app', retentionDays: 30),\n      name: 'file',\n    ),\n    WebhookChannel(\n      WebhookOptions(url: Uri.parse('https://logs.example.com/ingest')),\n      name: 'webhook',\n    ),\n  ],\n);\n\nfinal logger = await Logger.create(config: config);\n"})}),"\n",(0,o.jsx)(n.p,{children:"Typed configs support JSON serialization for configuration files."}),"\n",(0,o.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Use Structured Logging"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dart",children:"logger.info('User logged in', Context({\n  'user_id': userId,\n  'ip_address': ipAddress,\n  'login_method': 'oauth'\n}));\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Set Appropriate Log Levels"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dart",children:"final logger = await Logger.create(\n  config: LogConfig(\n    level: 'warning', // Only log warning and above in production\n    channels: [ConsoleChannel(ConsoleOptions(), name: 'console')],\n  ),\n);\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Use Channel-Specific Formatters"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dart",children:"final logger = await Logger.create(\n  config: LogConfig(\n    channels: [\n      DailyFileChannel(\n        DailyFileOptions(path: 'logs/app'),\n        name: 'file',\n        formatter: JsonLogFormatter(),\n      ),\n      ConsoleChannel(\n        ConsoleOptions(),\n        name: 'console',\n        formatter: PrettyLogFormatter(),\n      ),\n    ],\n  ),\n);\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Clean Up Resources"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-dart",children:"await logger.shutdown(); // Before application exit\n"})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/api/drivers/daily-file",children:"Daily File Driver"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/advanced/middleware",children:"Middleware Guide"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/migration/v2",children:"Migration to v2"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/advanced/type-formatters",children:"Type Formatters & Printers"})}),"\n"]})]})}function g(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}}}]);
"use strict";(globalThis.webpackChunkwebsite=globalThis.webpackChunkwebsite||[]).push([[857],{8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var l=t(6540);const i={},o=l.createContext(i);function r(e){const n=l.useContext(o);return l.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),l.createElement(o.Provider,{value:n},e.children)}},9560:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>g,frontMatter:()=>r,metadata:()=>l,toc:()=>d});const l=JSON.parse('{"id":"getting-started","title":"Getting Started","description":"Install Contextual, configure your first logger, and learn key concepts quickly.","source":"@site/docs/getting-started.mdx","sourceDirName":".","slug":"/getting-started","permalink":"/contextual/getting-started","draft":false,"unlisted":false,"editUrl":"https://github.com/kingwill101/contextual/edit/main/website/docs/getting-started.mdx","tags":[],"version":"current","frontMatter":{"title":"Getting Started","description":"Install Contextual, configure your first logger, and learn key concepts quickly."},"sidebar":"docsSidebar","previous":{"title":"Contextual","permalink":"/contextual/"},"next":{"title":"Usage","permalink":"/contextual/usage"}}');var i=t(4848),o=t(8453);const r={title:"Getting Started",description:"Install Contextual, configure your first logger, and learn key concepts quickly."},a="Getting Started",s={},d=[{value:"Installation",id:"installation",level:2},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Important: Proper Shutdown",id:"important-proper-shutdown",level:2},{value:"Typed Configuration",id:"typed-configuration",level:3},{value:"Features",id:"features",level:2},{value:"Multiple Output Channels",id:"multiple-output-channels",level:3},{value:"Daily Rotating File Logs",id:"daily-rotating-file-logs",level:3},{value:"Rich Context",id:"rich-context",level:3},{value:"Working with Channels",id:"working-with-channels",level:3},{value:"Log Formatting",id:"log-formatting",level:3},{value:"Log Levels",id:"log-levels",level:3},{value:"Middleware Support",id:"middleware-support",level:3},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"getting-started",children:"Getting Started"})}),"\n",(0,i.jsx)(n.p,{children:"Contextual is a powerful, flexible logging system for Dart that provides rich features for structured logging, multiple output channels, and extensive customization options."}),"\n",(0,i.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,i.jsxs)(n.p,{children:["Add Contextual to your project by adding it to your ",(0,i.jsx)(n.code,{children:"pubspec.yaml"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"dependencies:\n  contextual: ^latest_version\n"})}),"\n",(0,i.jsx)(n.p,{children:"Or install it using the Dart package manager:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"dart pub add contextual\n"})}),"\n",(0,i.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,i.jsx)(n.p,{children:"Here's a simple example to get you started:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"import 'package:contextual/contextual.dart';\n\nvoid main() async {\n  // Create a logger with console output\n  final logger = await Logger.create(\n    config: const LogConfig(\n      channels: [ConsoleChannel(ConsoleOptions(), name: 'console')],\n    ),\n  );\n\n  // Log some messages\n  logger.info('Hello from Contextual!');\n  logger.warning('This is a warning message');\n  logger.error('Something went wrong', Context({\n    'error_code': 500,\n    'request_id': 'abc123'\n  }));\n\n  // Important: If using file drivers, ensure proper shutdown\n  await logger.shutdown();\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"important-proper-shutdown",children:"Important: Proper Shutdown"}),"\n",(0,i.jsxs)(n.p,{children:["When using file-based drivers (like ",(0,i.jsx)(n.code,{children:"DailyFileLogDriver"}),"), it's crucial to properly shut down the logger before your application exits. This ensures all pending logs are written and resources are cleaned up:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"final logger = await Logger.create(\n  config: const LogConfig(\n    channels: [DailyFileChannel(DailyFileOptions(path: 'logs/app'))],\n  ),\n);\n \ntry {\n  // Your application code\n} finally {\n  // Always shutdown the logger when using file drivers\n  await logger.shutdown();\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"typed-configuration",children:"Typed Configuration"}),"\n",(0,i.jsx)(n.p,{children:"Configure Contextual using typed configuration objects for compile-time safety and autocompletion:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"final config = LogConfig(\n  level: 'debug',\n  environment: 'development',\n  channels: const [\n    ConsoleChannel(ConsoleOptions(), name: 'console'),\n    DailyFileChannel(DailyFileOptions(path: 'logs/app', retentionDays: 7), name: 'file'),\n    WebhookChannel(WebhookOptions(url: Uri.parse('https://hooks.slack.com/services/...')), name: 'slack'),\n  ],\n);\n\nfinal logger = await Logger.create(config: config);\n"})}),"\n",(0,i.jsx)(n.p,{children:"Note: Console-only logging setups don't require explicit shutdown, but it's still good practice to include it."}),"\n",(0,i.jsx)(n.h2,{id:"features",children:"Features"}),"\n",(0,i.jsx)(n.h3,{id:"multiple-output-channels",children:"Multiple Output Channels"}),"\n",(0,i.jsx)(n.p,{children:"Contextual supports multiple output channels, allowing you to send logs to different destinations:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"final logger = await Logger.create(\n  config: LogConfig(\n    channels: [\n      ConsoleChannel(ConsoleOptions(), name: 'console'),\n      DailyFileChannel(DailyFileOptions(path: 'logs/app'), name: 'file'),\n      WebhookChannel(WebhookOptions(url: Uri.parse('https://your-webhook.com')), name: 'webhook'),\n    ],\n  ),\n);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"daily-rotating-file-logs",children:"Daily Rotating File Logs"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"DailyFileLogDriver"})," automatically rotates log files daily and manages retention:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"final logger = await Logger.create(\n  config: LogConfig(\n    channels: [\n      DailyFileChannel(\n        DailyFileOptions(\n          path: 'logs/app',\n          retentionDays: 30,\n          flushInterval: const Duration(seconds: 1),\n        ),\n        name: 'file',\n      ),\n    ],\n  ),\n);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"rich-context",children:"Rich Context"}),"\n",(0,i.jsx)(n.p,{children:"Add context to your logs for better debugging and tracing:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"logger.withContext({\n  'environment': 'production',\n  'version': '1.0.0',\n})..info('Application started');\n\n// Add request-specific context\nlogger.info(\n  'Processing request',\n  Context({\n    'request_id': 'req123',\n    'user_id': 'user456',\n    'path': '/api/users'\n  })\n);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"working-with-channels",children:"Working with Channels"}),"\n",(0,i.jsxs)(n.p,{children:["At runtime, channels are represented by a ",(0,i.jsx)(n.code,{children:"Channel<T extends LogDriver>"})," wrapper that contains the name, driver, optional formatter, and per-channel middlewares."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Name-based selection:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"logger['console'].info('Only to console');\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Type-based selection:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"logger.forDriver<ConsoleLogDriver>().info('All console drivers');\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Utilities:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"logger.hasChannel('file');\nfinal ch = logger.getChannel('file');\nlogger.removeChannel('webhook');\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Override a channel with a new formatter using copyWith:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"final file = logger.getChannel('file');\nif (file != null) {\n  logger\n    ..removeChannel('file')\n    ..addChannel('file', file.driver, formatter: PrettyLogFormatter());\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"log-formatting",children:"Log Formatting"}),"\n",(0,i.jsx)(n.p,{children:"Customize how your logs are formatted:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"final logger = await Logger.create(\n  config: LogConfig(\n    formatter: JsonLogFormatter(), // or PrettyLogFormatter(), PlainTextLogFormatter()\n    channels: [ConsoleChannel(ConsoleOptions(), name: 'console')],\n  ),\n);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"log-levels",children:"Log Levels"}),"\n",(0,i.jsx)(n.p,{children:"Contextual supports multiple log levels:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"logger.debug('Debug message');\nlogger.info('Info message');\nlogger.notice('Notice message');\nlogger.warning('Warning message');\nlogger.error('Error message');\nlogger.critical('Critical message');\nlogger.alert('Alert message');\nlogger.emergency('Emergency message');\n"})}),"\n",(0,i.jsx)(n.h3,{id:"middleware-support",children:"Middleware Support"}),"\n",(0,i.jsx)(n.p,{children:"Add middleware to transform or filter logs:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"logger.addMiddleware(() => {\n  'timestamp': DateTime.now().toIso8601String(),\n  'hostname': Platform.hostname,\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Check out the ",(0,i.jsx)(n.a,{href:"/api/overview",children:"API Reference"})," for detailed documentation"]}),"\n",(0,i.jsxs)(n.li,{children:["Learn about ",(0,i.jsx)(n.a,{href:"/advanced/middleware",children:"Advanced Features"})]}),"\n",(0,i.jsxs)(n.li,{children:["Explore ",(0,i.jsx)(n.a,{href:"/api/drivers/daily-file",children:"Driver Guides"})," for configuration examples"]}),"\n"]})]})}function g(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);
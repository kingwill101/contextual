"use strict";(globalThis.webpackChunkwebsite=globalThis.webpackChunkwebsite||[]).push([[590],{6360:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"api/drivers/console","title":"Console Driver","description":"Use ConsoleLogDriver for low-latency stdout logging with flexible formatting options.","source":"@site/docs/api/drivers/console.mdx","sourceDirName":"api/drivers","slug":"/api/drivers/console","permalink":"/contextual/api/drivers/console","draft":false,"unlisted":false,"editUrl":"https://github.com/kingwill101/contextual/edit/main/website/docs/api/drivers/console.mdx","tags":[],"version":"current","frontMatter":{"title":"Console Driver","description":"Use ConsoleLogDriver for low-latency stdout logging with flexible formatting options."},"sidebar":"docsSidebar","previous":{"title":"Driver Configuration","permalink":"/contextual/api/drivers/configuration"},"next":{"title":"Daily File Driver","permalink":"/contextual/api/drivers/daily-file"}}');var r=o(4848),l=o(8453);const t={title:"Console Driver",description:"Use ConsoleLogDriver for low-latency stdout logging with flexible formatting options."},a="Console Driver",s={},c=[{value:"Features",id:"features",level:2},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Typed configuration (recommended)",id:"typed-configuration-recommended",level:3},{value:"Raw/imperative wiring",id:"rawimperative-wiring",level:3},{value:"Configuration Options",id:"configuration-options",level:2},{value:"Targeting the Console Channel",id:"targeting-the-console-channel",level:2},{value:"Formatting",id:"formatting",level:2},{value:"Global (logger-wide) formatter",id:"global-logger-wide-formatter",level:3},{value:"Per-channel formatter (typed config)",id:"per-channel-formatter-typed-config",level:3},{value:"Per-channel formatter (imperative)",id:"per-channel-formatter-imperative",level:3},{value:"Examples",id:"examples",level:2},{value:"With middleware enrichment",id:"with-middleware-enrichment",level:3},{value:"Stacking Console with File output",id:"stacking-console-with-file-output",level:3},{value:"Sampling noisy logs to console",id:"sampling-noisy-logs-to-console",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"console-driver",children:"Console Driver"})}),"\n",(0,r.jsx)(n.p,{children:"The Console driver writes log messages to standard output (stdout). It\u2019s a zero\u2011config, low\u2011latency destination that pairs well with human\u2011readable formatters during development and with JSON for production/containerized environments."}),"\n",(0,r.jsx)(n.h2,{id:"features",children:"Features"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Instant, low-overhead output to stdout"}),"\n",(0,r.jsx)(n.li,{children:"Works with any formatter (Pretty, Plain, JSON)"}),"\n",(0,r.jsx)(n.li,{children:"Great for local development and container logs"}),"\n",(0,r.jsx)(n.li,{children:"Supports middleware enrichment and sampling strategies"}),"\n",(0,r.jsx)(n.li,{children:"Can be combined via the Stack driver with other outputs"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,r.jsx)(n.h3,{id:"typed-configuration-recommended",children:"Typed configuration (recommended)"}),"\n",(0,r.jsxs)(n.p,{children:["Use the typed ",(0,r.jsx)(n.code,{children:"ConsoleChannel"})," with ",(0,r.jsx)(n.code,{children:"ConsoleOptions"})," for compile\u2011time safety and clarity:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"import 'package:contextual/contextual.dart';\n\nvoid main() async {\n  final logger = await Logger.create(\n    config: LogConfig(\n      channels: const [\n        ConsoleChannel(\n          ConsoleOptions(),\n          name: 'console',\n        ),\n      ],\n    ),\n  );\n\n  logger.info('Hello from Contextual (console)!');\n}\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Give the channel a name (e.g. ",(0,r.jsx)(n.code,{children:"console"}),") so you can target it later."]}),"\n",(0,r.jsxs)(n.li,{children:["You can also provide a channel-specific ",(0,r.jsx)(n.code,{children:"formatter"})," (see Formatting below)."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"rawimperative-wiring",children:"Raw/imperative wiring"}),"\n",(0,r.jsx)(n.p,{children:"You can also wire the driver directly using the imperative API:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"import 'package:contextual/contextual.dart';\n\nvoid main() async {\n  final logger = await Logger.create();\n\n  // Add a console channel using the raw driver\n  logger.addChannel('console', ConsoleLogDriver());\n\n  logger.info('Logging to console via raw driver');\n\n  // Optionally remove, replace, or re-add channels at runtime\n  logger\n    ..removeChannel('console')\n    ..addChannel('console', ConsoleLogDriver());\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"configuration-options",children:"Configuration Options"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"ConsoleOptions"})," currently has no fields. It exists for consistency and future expansion. Typical usage:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"const options = ConsoleOptions();\n\nfinal logger = await Logger.create(\n  config: LogConfig(\n    channels: [\n      ConsoleChannel(options, name: 'console'),\n    ],\n  ),\n);\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"targeting-the-console-channel",children:"Targeting the Console Channel"}),"\n",(0,r.jsx)(n.p,{children:"You can target the console output specifically either by channel name, or by driver type:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"By name:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"logger['console']?.info('Only goes to the console channel');\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"By driver type:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"logger.forDriver<ConsoleLogDriver>().info('All console drivers');\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"formatting",children:"Formatting"}),"\n",(0,r.jsx)(n.p,{children:"Console output is only as useful as its formatting. Pair the Console driver with the formatter that fits your use case:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"PrettyLogFormatter: Human-friendly, colorized output (great for development)"}),"\n",(0,r.jsx)(n.li,{children:"PlainTextLogFormatter: Minimal, fast text output"}),"\n",(0,r.jsx)(n.li,{children:"JsonLogFormatter: Structured logs for ingestion and search (great for production)"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"global-logger-wide-formatter",children:"Global (logger-wide) formatter"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"final logger = await Logger.create(\n  config: LogConfig(\n    formatter: PrettyLogFormatter(),\n    channels: const [\n      ConsoleChannel(ConsoleOptions(), name: 'console'),\n    ],\n  ),\n);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"per-channel-formatter-typed-config",children:"Per-channel formatter (typed config)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"final logger = await Logger.create(\n  config: LogConfig(\n    channels: const [\n      ConsoleChannel(\n        ConsoleOptions(),\n        name: 'console',\n        formatter: PrettyLogFormatter(),\n      ),\n    ],\n  ),\n);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"per-channel-formatter-imperative",children:"Per-channel formatter (imperative)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"final logger = await Logger.create();\n\nlogger.addChannel(\n  'console',\n  ConsoleLogDriver(),\n  formatter: JsonLogFormatter(),\n);\n"})}),"\n",(0,r.jsx)(n.p,{children:"Tip: Use PrettyLogFormatter locally, and JsonLogFormatter in production for structured log pipelines."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(n.h3,{id:"with-middleware-enrichment",children:"With middleware enrichment"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"final logger = await Logger.create(\n  config: LogConfig(\n    channels: const [\n      ConsoleChannel(ConsoleOptions(), name: 'console'),\n    ],\n    middlewares: [\n      () => {\n        'env': 'production',\n        'version': '2.0.0',\n        'ts': DateTime.now().toIso8601String(),\n      },\n    ],\n  ),\n);\n\nlogger.info('Application started');\n"})}),"\n",(0,r.jsx)(n.h3,{id:"stacking-console-with-file-output",children:"Stacking Console with File output"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"final logger = await Logger.create(\n  config: LogConfig(\n    channels: const [\n      // A stack channel can reference other channels by name\n      StackChannel(\n        StackOptions(\n          channels: ['console', 'file'],\n          ignoreExceptions: true,\n        ),\n        name: 'stack',\n      ),\n      ConsoleChannel(ConsoleOptions(), name: 'console'),\n      DailyFileChannel(\n        DailyFileOptions(path: 'logs/app', retentionDays: 14),\n        name: 'file',\n      ),\n    ],\n  ),\n);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"sampling-noisy-logs-to-console",children:"Sampling noisy logs to console"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"final logger = await Logger.create(\n  config: LogConfig(\n    channels: const [\n      ConsoleChannel(ConsoleOptions(), name: 'console'),\n      // Wrap the console output with sampling\n      SamplingChannel(\n        SamplingOptions(\n          // Example rates per level; values between 0.0 and 1.0\n          rates: {\n            Level.debug: 0.1, // keep 10% of debug logs\n            Level.info: 1.0,   // keep all info logs\n          },\n          wrappedChannel: 'console', // wrap the named console channel\n        ),\n        name: 'console_sampled',\n      ),\n    ],\n  ),\n);\n\n// Use the sampled channel by name if you want to route only specific logs:\nlogger['console_sampled']?.debug('This debug log may be sampled');\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Use PrettyLogFormatter in development for readability; use JsonLogFormatter in production for machine parsing."}),"\n",(0,r.jsx)(n.li,{children:"Enrich logs with middleware (request IDs, user IDs, version, env) for better diagnostics."}),"\n",(0,r.jsx)(n.li,{children:"Use levels appropriately and consider Sampling/Stack drivers for high-volume scenarios."}),"\n",(0,r.jsx)(n.li,{children:"If you need durability or retention, pair Console with the Daily File driver via the Stack driver."}),"\n",(0,r.jsx)(n.li,{children:"Prefer typed channels in configuration for safety; use imperative APIs for dynamic runtime wiring or tests."}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/api/drivers/configuration",children:"Driver Configuration"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/advanced/middleware",children:"Middleware Guide"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/advanced/batching-and-shutdown",children:"Batching & Shutdown"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/api/drivers/daily-file",children:"Daily File Driver"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/api/overview",children:"API Overview"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>t,x:()=>a});var i=o(6540);const r={},l=i.createContext(r);function t(e){const n=i.useContext(l);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);
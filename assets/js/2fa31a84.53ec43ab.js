"use strict";(globalThis.webpackChunkwebsite=globalThis.webpackChunkwebsite||[]).push([[901],{1208:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>t,contentTitle:()=>s,default:()=>g,frontMatter:()=>a,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"api/drivers/configuration","title":"Driver Configuration","description":"Configure typed channels and options for Console, File, Webhook, and more.","source":"@site/docs/api/drivers/configuration.mdx","sourceDirName":"api/drivers","slug":"/api/drivers/configuration","permalink":"/contextual/api/drivers/configuration","draft":false,"unlisted":false,"editUrl":"https://github.com/kingwill101/contextual/edit/main/website/docs/api/drivers/configuration.mdx","tags":[],"version":"current","frontMatter":{"title":"Driver Configuration","description":"Configure typed channels and options for Console, File, Webhook, and more."},"sidebar":"docsSidebar","previous":{"title":"API Overview","permalink":"/contextual/api/overview"},"next":{"title":"Console Driver","permalink":"/contextual/api/drivers/console"}}');var l=i(4848),r=i(8453);const a={title:"Driver Configuration",description:"Configure typed channels and options for Console, File, Webhook, and more."},s="Driver Configuration",t={},c=[{value:"Console Driver",id:"console-driver",level:2},{value:"Daily File Driver",id:"daily-file-driver",level:2},{value:"Webhook Driver",id:"webhook-driver",level:2},{value:"Stack Driver",id:"stack-driver",level:2},{value:"Sampling Driver",id:"sampling-driver",level:2},{value:"Full Configuration Example",id:"full-configuration-example",level:2},{value:"Loading Configuration",id:"loading-configuration",level:2}];function d(n){const e={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...n.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(e.header,{children:(0,l.jsx)(e.h1,{id:"driver-configuration",children:"Driver Configuration"})}),"\n",(0,l.jsx)(e.p,{children:"This guide details how to configure each driver type in Contextual using the typed configuration API. Typed configurations provide compile-time safety and autocompletion."}),"\n",(0,l.jsx)(e.h2,{id:"console-driver",children:"Console Driver"}),"\n",(0,l.jsx)(e.p,{children:"The console driver outputs logs to the terminal with optional color support."}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-dart",children:"final config = LogConfig(\n  channels: const [\n    ConsoleChannel(ConsoleOptions(), name: 'console'),\n  ],\n);\nfinal logger = await Logger.create(config: config);\n"})}),"\n",(0,l.jsx)(e.h2,{id:"daily-file-driver",children:"Daily File Driver"}),"\n",(0,l.jsx)(e.p,{children:"The daily file driver writes logs to rotating daily files with automatic cleanup."}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-dart",children:"final config = LogConfig(\n  channels: const [\n    DailyFileChannel(\n      DailyFileOptions(\n        path: 'logs/app',\n        retentionDays: 30,\n        flushInterval: Duration(seconds: 1),\n      ),\n      name: 'file',\n    ),\n  ],\n);\nfinal logger = await Logger.create(config: config);\n"})}),"\n",(0,l.jsx)(e.p,{children:"Configuration options:"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.code,{children:"path"}),": Base path for log files (required)"]}),"\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.code,{children:"retentionDays"}),": Number of days to retain log files (default: 14)"]}),"\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.code,{children:"flushInterval"}),": Flush interval in milliseconds (default: 500)"]}),"\n"]}),"\n",(0,l.jsx)(e.h2,{id:"webhook-driver",children:"Webhook Driver"}),"\n",(0,l.jsx)(e.p,{children:"The webhook driver sends logs to an HTTP endpoint."}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-dart",children:"final config = LogConfig(\n  channels: const [\n    WebhookChannel(\n      WebhookOptions(\n        url: Uri.parse('https://logs.example.com/ingest'),\n        headers: {'Authorization': 'Bearer token123'},\n        timeout: Duration(seconds: 5),\n        keepAlive: true,\n      ),\n      name: 'webhook',\n    ),\n  ],\n);\nfinal logger = await Logger.create(config: config);\n"})}),"\n",(0,l.jsx)(e.p,{children:"Configuration options:"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.code,{children:"url"}),": Webhook endpoint URL (required)"]}),"\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.code,{children:"headers"}),": Optional HTTP headers to include with requests"]}),"\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.code,{children:"timeout"}),": Request timeout (default: 5 seconds)"]}),"\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.code,{children:"keepAlive"}),": Whether to keep connections alive (default: true)"]}),"\n"]}),"\n",(0,l.jsx)(e.h2,{id:"stack-driver",children:"Stack Driver"}),"\n",(0,l.jsx)(e.p,{children:"The stack driver combines multiple drivers into one channel."}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-dart",children:"final config = LogConfig(\n  channels: const [\n    ConsoleChannel(ConsoleOptions(), name: 'console'),\n    DailyFileChannel(DailyFileOptions(path: 'logs/app'), name: 'file'),\n    StackChannel(\n      StackOptions(\n        channels: ['console', 'file'],\n        ignoreExceptions: true,\n      ),\n      name: 'stack',\n    ),\n  ],\n);\nfinal logger = await Logger.create(config: config);\n"})}),"\n",(0,l.jsx)(e.p,{children:"Configuration options:"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.code,{children:"channels"}),": List of channel names to stack (required)"]}),"\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.code,{children:"ignoreExceptions"}),": Whether to continue if one driver fails (default: false)"]}),"\n"]}),"\n",(0,l.jsx)(e.h2,{id:"sampling-driver",children:"Sampling Driver"}),"\n",(0,l.jsx)(e.p,{children:"The sampling driver allows probabilistic logging based on log levels."}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-dart",children:"final config = LogConfig(\n  channels: const [\n    ConsoleChannel(ConsoleOptions(), name: 'console'),\n    SamplingChannel(\n      SamplingOptions(\n        rates: {\n          Level.debug: 0.1,   // Log 10% of debug messages\n          Level.info: 0.5,    // Log 50% of info messages\n          Level.warning: 1.0, // Log all warning messages\n        },\n        wrappedChannel: 'console',\n      ),\n      name: 'sampled',\n    ),\n  ],\n);\nfinal logger = await Logger.create(config: config);\n"})}),"\n",(0,l.jsx)(e.p,{children:"Configuration options:"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.code,{children:"rates"}),": Map of log levels to sampling probabilities (0.0 - 1.0)"]}),"\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.code,{children:"wrappedChannel"}),": The channel to sample (must reference an existing channel name)"]}),"\n"]}),"\n",(0,l.jsx)(e.h2,{id:"full-configuration-example",children:"Full Configuration Example"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-dart",children:"final config = LogConfig(\n  environment: 'production',\n  level: 'info',\n  formatter: JsonLogFormatter(),\n  batching: BatchingConfig(\n    enabled: true,\n    batchSize: 50,\n    flushInterval: Duration(seconds: 1),\n  ),\n  channels: const [\n    ConsoleChannel(ConsoleOptions(), name: 'console'),\n    DailyFileChannel(\n      DailyFileOptions(path: 'logs/app', retentionDays: 30),\n      name: 'file',\n    ),\n    WebhookChannel(\n      WebhookOptions(url: Uri.parse('https://logs.example.com/ingest')),\n      name: 'webhook',\n    ),\n    StackChannel(\n      StackOptions(channels: ['file', 'webhook'], ignoreExceptions: true),\n      name: 'emergency',\n    ),\n    SamplingChannel(\n      SamplingOptions(\n        rates: {Level.debug: 0.1, Level.info: 0.5},\n        wrappedChannel: 'console',\n      ),\n      name: 'sampled',\n    ),\n  ],\n);\nfinal logger = await Logger.create(config: config);\n"})}),"\n",(0,l.jsx)(e.h2,{id:"loading-configuration",children:"Loading Configuration"}),"\n",(0,l.jsxs)(e.p,{children:["Typed configurations can be built in code or deserialized from JSON using ",(0,l.jsx)(e.code,{children:"dart_mappable"}),":"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-dart",children:"// From JSON\nfinal configJson = jsonDecode(jsonString);\nfinal config = LogConfigMapper.fromJson(configJson);\nfinal logger = await Logger.create(config: config);\n\n// From file\nfinal configFile = File('logging.json');\nfinal configJson = jsonDecode(await configFile.readAsString());\nfinal config = LogConfigMapper.fromJson(configJson);\nfinal logger = await Logger.create(config: config);\n"})})]})}function g(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,l.jsx)(e,{...n,children:(0,l.jsx)(d,{...n})}):d(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>a,x:()=>s});var o=i(6540);const l={},r=o.createContext(l);function a(n){const e=o.useContext(r);return o.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(l):n.components||l:a(n.components),o.createElement(r.Provider,{value:e},n.children)}}}]);
"use strict";(globalThis.webpackChunkwebsite=globalThis.webpackChunkwebsite||[]).push([[71],{2837:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>t,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>d});const l=JSON.parse('{"id":"api/drivers/daily-file","title":"Daily File Driver","description":"Configure and operate the DailyFileLogDriver for rotating file-based logging.","source":"@site/docs/api/drivers/daily-file.mdx","sourceDirName":"api/drivers","slug":"/api/drivers/daily-file","permalink":"/contextual/api/drivers/daily-file","draft":false,"unlisted":false,"editUrl":"https://github.com/kingwill101/contextual/edit/main/website/docs/api/drivers/daily-file.mdx","tags":[],"version":"current","frontMatter":{"title":"Daily File Driver","description":"Configure and operate the DailyFileLogDriver for rotating file-based logging."},"sidebar":"docsSidebar","previous":{"title":"Console Driver","permalink":"/contextual/api/drivers/console"},"next":{"title":"Webhook Driver (API)","permalink":"/contextual/api/drivers/webhook"}}');var r=i(4848),s=i(8453);const a={title:"Daily File Driver",description:"Configure and operate the DailyFileLogDriver for rotating file-based logging."},o="Daily File Driver",t={},d=[{value:"Features",id:"features",level:2},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Configuration Options",id:"configuration-options",level:2},{value:"Standard Implementation",id:"standard-implementation",level:3},{value:"Isolate-Optimized Implementation",id:"isolate-optimized-implementation",level:3},{value:"Parameters",id:"parameters",level:2},{value:"File Management",id:"file-management",level:2},{value:"File Rotation",id:"file-rotation",level:3},{value:"File Cleanup",id:"file-cleanup",level:3},{value:"Performance Optimization",id:"performance-optimization",level:2},{value:"Standard vs Isolate-Optimized",id:"standard-vs-isolate-optimized",level:3},{value:"Message Batching",id:"message-batching",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Resource Cleanup",id:"resource-cleanup",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"daily-file-driver",children:"Daily File Driver"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"DailyFileLogDriver"})," is a powerful logging driver that writes log messages to daily rotating log files. It automatically manages file rotation, cleanup of old files, and provides optimized writing capabilities."]}),"\n",(0,r.jsx)(n.h2,{id:"features",children:"Features"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Daily log file rotation"}),"\n",(0,r.jsx)(n.li,{children:"Automatic cleanup of old log files"}),"\n",(0,r.jsx)(n.li,{children:"Configurable retention period"}),"\n",(0,r.jsx)(n.li,{children:"Creates log directories if they don't exist"}),"\n",(0,r.jsx)(n.li,{children:"Message queuing with periodic batch writes"}),"\n",(0,r.jsx)(n.li,{children:"Automatic file cleanup"}),"\n",(0,r.jsx)(n.li,{children:"Optional isolate-optimized mode for high-performance logging"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"final logger = await Logger.create(\n  config: LogConfig(\n    channels: [\n      DailyFileChannel(\n        DailyFileOptions(\n          path: 'logs/app',\n          retentionDays: 30,\n          flushInterval: const Duration(seconds: 1),\n        ),\n        name: 'file',\n      ),\n    ],\n  ),\n);\n"})}),"\n",(0,r.jsx)(n.p,{children:"Logs will be written to files like:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"logs/app-2024-02-15.log"}),"\n",(0,r.jsx)(n.li,{children:"logs/app-2024-02-14.log"}),"\n",(0,r.jsx)(n.li,{children:"etc."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"configuration-options",children:"Configuration Options"}),"\n",(0,r.jsx)(n.h3,{id:"standard-implementation",children:"Standard Implementation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"final driver = DailyFileLogDriver.fromOptions(\n  DailyFileOptions(\n    path: 'logs/app',\n    retentionDays: 30, // Default: 14 days\n    flushInterval: const Duration(milliseconds: 500), // Default: 500ms\n  ),\n);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"isolate-optimized-implementation",children:"Isolate-Optimized Implementation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"final driver = DailyFileLogDriver.fromOptions(\n  DailyFileOptions(\n    path: 'logs/app',\n    retentionDays: 30,\n    flushInterval: const Duration(seconds: 1),\n  ),\n  isolateOptimized: true,\n);\n"})}),"\n",(0,r.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"path"}),": Base path for log files (required)"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Example: ",(0,r.jsx)(n.code,{children:"'logs/app'"})," will create files like ",(0,r.jsx)(n.code,{children:"logs/app-2024-02-15.log"})]}),"\n",(0,r.jsx)(n.li,{children:"Directories will be created automatically if they don't exist"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"retentionDays"}),": Number of days to keep log files (optional)"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Default: 14 days"}),"\n",(0,r.jsx)(n.li,{children:"Files older than this will be automatically deleted"}),"\n",(0,r.jsx)(n.li,{children:"Set to 0 to disable cleanup"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"flushInterval"}),": How often to flush queued messages (optional)"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Default: 500 milliseconds"}),"\n",(0,r.jsx)(n.li,{children:"Affects batching behavior and write performance"}),"\n",(0,r.jsx)(n.li,{children:"Lower values mean more frequent writes but higher I/O"}),"\n",(0,r.jsx)(n.li,{children:"Higher values mean better performance but more memory usage"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"file-management",children:"File Management"}),"\n",(0,r.jsx)(n.h3,{id:"file-rotation",children:"File Rotation"}),"\n",(0,r.jsx)(n.p,{children:"Files are automatically rotated at midnight (local time). The driver:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Detects day boundary crossings"}),"\n",(0,r.jsx)(n.li,{children:"Closes the current file"}),"\n",(0,r.jsx)(n.li,{children:"Opens a new file with the new date"}),"\n",(0,r.jsx)(n.li,{children:"Continues logging to the new file"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"// At 23:59:59 writing to: logs/app-2024-02-14.log\nlogger.forDriver<DailyFileLogDriver>().info('Last message of the day');\n\n// At 00:00:00 automatically switches to: logs/app-2024-02-15.log\nlogger.forDriver<DailyFileLogDriver>().info('First message of the new day');\n"})}),"\n",(0,r.jsx)(n.h3,{id:"file-cleanup",children:"File Cleanup"}),"\n",(0,r.jsxs)(n.p,{children:["Old log files are automatically cleaned up based on the ",(0,r.jsx)(n.code,{children:"retentionDays"})," setting:"]}),"\n",(0,r.jsx)(n.p,{children:"These files exist:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"logs/app-2024-02-15.log (today)"}),"\n",(0,r.jsx)(n.li,{children:"logs/app-2024-02-14.log (1 day old)"}),"\n",(0,r.jsx)(n.li,{children:"logs/app-2024-02-01.log (14 days old)"}),"\n",(0,r.jsx)(n.li,{children:"logs/app-2024-01-15.log (30 days old)"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"final driver = DailyFileLogDriver(\n  'logs/app',\n  retentionDays: 14, // Keep files for 14 days\n);\n\n"})}),"\n",(0,r.jsx)(n.p,{children:"After cleanup:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"logs/app-2024-02-15.log (kept)"}),"\n",(0,r.jsx)(n.li,{children:"logs/app-2024-02-14.log (kept)"}),"\n",(0,r.jsx)(n.li,{children:"logs/app-2024-02-01.log (kept)"}),"\n",(0,r.jsx)(n.li,{children:"logs/app-2024-01-15.log (deleted - too old)"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,r.jsx)(n.h3,{id:"standard-vs-isolate-optimized",children:"Standard vs Isolate-Optimized"}),"\n",(0,r.jsx)(n.p,{children:"The driver comes in two variants:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Standard Implementation"})," (",(0,r.jsx)(n.code,{children:"DailyFileLogDriver.fromOptions"}),")"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Uses direct file writes"}),"\n",(0,r.jsx)(n.li,{children:"Good for most use cases"}),"\n",(0,r.jsx)(n.li,{children:"Simpler implementation"}),"\n",(0,r.jsxs)(n.li,{children:["Example:","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"final driver = DailyFileLogDriver.fromOptions(\n  DailyFileOptions(path: 'logs/app'),\n);\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Isolate-Optimized"})," (",(0,r.jsx)(n.code,{children:"DailyFileLogDriver.fromOptions"})," with ",(0,r.jsx)(n.code,{children:"isolateOptimized: true"}),")"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Uses ",(0,r.jsx)(n.code,{children:"IOSink"})," for buffered writing"]}),"\n",(0,r.jsx)(n.li,{children:"Better performance for high-volume logging"}),"\n",(0,r.jsx)(n.li,{children:"More efficient memory usage"}),"\n",(0,r.jsxs)(n.li,{children:["Example:","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"final driver = DailyFileLogDriver.fromOptions(\n  DailyFileOptions(path: 'logs/app'),\n  isolateOptimized: true,\n);\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"message-batching",children:"Message Batching"}),"\n",(0,r.jsxs)(n.p,{children:["Both implementations use message batching through the ",(0,r.jsx)(n.code,{children:"LogQueue"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"final driver = DailyFileLogDriver.fromOptions(\n  DailyFileOptions(\n    path: 'logs/app',\n    flushInterval: const Duration(milliseconds: 100), // More frequent writes\n  ),\n);\n\n// vs\n\nfinal driver = DailyFileLogDriver.fromOptions(\n  DailyFileOptions(\n    path: 'logs/app',\n    flushInterval: const Duration(seconds: 2), // More batching, fewer writes\n  ),\n);\n"})}),"\n",(0,r.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,r.jsx)(n.p,{children:"The driver handles various error conditions gracefully:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Directory creation failures"}),"\n",(0,r.jsx)(n.li,{children:"File permission issues"}),"\n",(0,r.jsx)(n.li,{children:"Disk space problems"}),"\n",(0,r.jsx)(n.li,{children:"File system errors"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Example with error handling:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"final logger = await Logger.create(\n  config: LogConfig(\n    channels: [\n      DailyFileChannel(\n        DailyFileOptions(path: 'logs/app'),\n        name: 'file',\n      ),\n      ConsoleChannel(\n        ConsoleOptions(),\n        name: 'console', // Fallback for logging errors\n      ),\n    ],\n  ),\n);\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"try {\n  // Your application code\n} catch (e) {\n  logger.error('Failed to write to log file', Context({\n    'error': e.toString(),\n  }));\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"resource-cleanup",children:"Resource Cleanup"}),"\n",(0,r.jsx)(n.p,{children:"Always properly shut down the logger to ensure all messages are written and resources are cleaned up:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"final logger = await Logger.create(\n  config: LogConfig(\n    channels: [\n      DailyFileChannel(\n        DailyFileOptions(path: 'logs/app'),\n        name: 'file',\n      ),\n    ],\n  ),\n);\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"// ... use logger ...\n\n// Before application exit:\nawait logger.shutdown();\n"})}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Use Appropriate Flush Intervals"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"// Development: More frequent flushes for immediate feedback\nfinal devDriver = DailyFileLogDriver.fromOptions(\n  DailyFileOptions(\n    path: 'logs/app',\n    flushInterval: const Duration(milliseconds: 100),\n  ),\n);\n\n// Production: Longer intervals for better performance\nfinal prodDriver = DailyFileLogDriver.fromOptions(\n  DailyFileOptions(\n    path: 'logs/app',\n    flushInterval: const Duration(seconds: 2),\n  ),\n);\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Set Reasonable Retention Periods"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"// High-volume logs: Shorter retention\nfinal highVolumeDriver = DailyFileLogDriver.fromOptions(\n  DailyFileOptions(\n    path: 'logs/audit',\n    retentionDays: 7,\n  ),\n);\n\n// Important logs: Longer retention\nfinal auditDriver = DailyFileLogDriver.fromOptions(\n  DailyFileOptions(\n    path: 'logs/audit',\n    retentionDays: 90,\n  ),\n);\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Use with Other Drivers"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"final logger = await Logger.create(\n  config: LogConfig(\n    channels: [\n      DailyFileChannel(\n        DailyFileOptions(path: 'logs/app'),\n        name: 'file',\n      ),\n      ConsoleChannel(\n        ConsoleOptions(),\n        name: 'console',\n      ),\n      WebhookChannel(\n        WebhookOptions(url: Uri.parse('https://logs.example.com')),\n        name: 'webhook',\n      ),\n    ],\n  ),\n);\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Monitor Disk Usage"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"final logger = await Logger.create(\n  config: LogConfig(\n    channels: [ConsoleChannel(ConsoleOptions(), name: 'console')],\n    middlewares: [\n      () {\n        final logDir = Directory('logs');\n        final usage = logDir.statSync().size;\n        if (usage > 1024 * 1024 * 1024) { // 1GB\n          print('Warning: High log directory usage');\n        }\n        return {};\n      },\n    ],\n  ),\n);\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/api/drivers/configuration",children:"Driver Configuration"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/advanced/middleware",children:"Middleware Guide"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>o});var l=i(6540);const r={},s=l.createContext(r);function a(e){const n=l.useContext(s);return l.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),l.createElement(s.Provider,{value:n},e.children)}}}]);